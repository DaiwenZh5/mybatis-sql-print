import net.researchgate.release.GitAdapter

import java.util.regex.Matcher

plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '0.6.5'
    id 'net.researchgate.release' version '2.8.1'
}

group 'com.daiwenzh5'
version version


repositories {
//    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testCompileOnly "org.junit.jupiter:junit-jupiter-engine:5.7.0"
    compileOnly "org.projectlombok:lombok:1.18.16"
    testCompileOnly "org.projectlombok:lombok:1.18.16"
    testAnnotationProcessor "org.projectlombok:lombok:1.18.16"
    annotationProcessor "org.projectlombok:lombok:1.18.16"
}

// See https://github.com/JetBrains/gradle-intellij-plugin/
intellij {
    version '2020.2.3'
    type 'IU'
}

patchPluginXml {

    description """
        <h2> A Mybatis SQL log printing tool. </h2>
        <p> By reading the log in the console, the SQL printed by Mybatis is automatically extracted and all parameters are formatted. <br/>
        <p> Use: You can open the Mybatis SQl-Print Tool Window by right-clicking (or Alt + P) and the plug-in will execute automatically. </p>
        <hr/>
        <h2>mybatis SQL日志打印工具.</h2>
        <p>通过拦截控制台中的日志，自动提取 mybatis 打印的 SQL，并格式化所有参数。</p>
        <p>使用：通过（在控制台）右键菜单打开 mybatis-sql-print 窗口，然后插件将会自动执行。</p>
    """
}

release {
    preCommitText = ''
    preTagCommitMessage = '[Gradle Release Plugin] - pre tag commit: '
    tagCommitMessage = '[Gradle Release Plugin] - creating tag: '
    newVersionCommitMessage = '[Gradle Release Plugin] - new version commit: '
    tagTemplate = 'v${version}'
    versionPropertyFile = 'gradle.properties'
    versionProperties = []
    snapshotSuffix = '-SNAPSHOT'
    buildTasks = ['build']
    ignoredSnapshotDependencies = []
    versionPatterns = [
            /(\d+)([^\d]*$)/: { Matcher m, Project p -> m.replaceAll("${(m[0][1] as int) + 1}${m[0][2]}") }
    ]
    pushReleaseVersionBranch = false
    scmAdapters = [
            GitAdapter,
    ]

    git {
        requireBranch = 'master'
        pushToRemote = 'origin'
        pushToBranchPrefix = ''
        commitVersionFileOnly = false
        signTag = false
    }

}

publishPlugin {
    token = System.getenv("intellijPublishToken")
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

//test {
//    useJUnitPlatform()
//}